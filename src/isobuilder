#!/bin/sh
#
# IsoBuilder for TinyCore64
#
# alphons@heijden.com
#
#
ISOBUILDER="2023-02-03 v1.12"
#
# WORKINGDIR must have write rights for executing user (not root)
#
WORKINGDIR="/mnt/sda1"
RELEASE="release"
KERNELVERSION="6.1.9"
ISOSRC="CorePure64.iso"
NEWISO="CorePure64-$KERNELVERSION.iso"
#
# ---------------------------------------------------------
#
REMOTE="http://www.tinycorelinux.net/13.x/x86_64/release/"
ISODIR="$WORKINGDIR/$RELEASE"
#
LINUX="linux-$KERNELVERSION"
LINSRC="https://cdn.kernel.org/pub/linux/kernel/v6.x/$LINUX.tar.xz"
LINUXPATH="$WORKINGDIR/$LINUX"
#
LIBNAME="$KERNELVERSION-tinycore64"
#
BB=busybox-1.36.0.tar.bz2
#
# GLIB is experimental at the moment
GLIBVERSION="glibc-2.36"
#
KERNEL=vmlinuz64
INITRD=$ISODIR/initrd
BOOT=$ISODIR/iso_contents/boot
#
SCRIPTDIR=$PWD
#
# ==========================================================

function MakeInitRd()
{
  CONTENTSBOOT=$1
  echo "making initrd from corepure64 or rootfs64 and modules64"
  sudo mkdir initrd
  cd initrd
  if [[ -f $CONTENTSBOOT/corepure64.gz ]]; then
    echo "gunzip corepure64.gz"
    sudo gunzip -c $CONTENTSBOOT/corepure64.gz | sudo cpio -id -H newc
  fi
  if [[ -f $CONTENTSBOOT/rootfs64.gz ]]; then
    echo "gunzip rootfs64.gz"
    sudo gunzip -c $CONTENTSBOOT/rootfs64.gz | sudo cpio -id -H newc
  fi
  if [[ -f $CONTENTSBOOT/modules64.gz ]]; then
    echo "gunzip modules64.gz"
    sudo gunzip -c $CONTENTSBOOT/modules64.gz | sudo cpio -id -H newc
  fi
  echo "Done"
}

function IsoExtract () 
{
  echo
  echo "Unpacking ISO to iso_contents and initrd"  
  cd $ISODIR
  if [ -d "iso_contents" ] && [ -d "initrd" ]; then
    echo "Removing old iso_contents and initrd"
    sudo rm -rf iso_contents
    sudo rm -rf initrd
  fi 

  echo "making iso_contents"
  sudo mkdir iso_contents_org
  sudo mkdir iso_contents
  sudo mount -o loop $ISOSRC iso_contents_org
  sudo rsync -a -H iso_contents_org/ iso_contents/
  sudo umount iso_contents_org
  sudo rm -rf iso_contents_org
  MakeInitRd $ISODIR/iso_contents/boot
}

function Install () 
{
  echo
  cd $LINUXPATH
  echo "Install kernel and modules"

  LIB=$INITRD/lib/modules/$LIBNAME

  if [ -d "$INITRD" ]; then

    echo "0 Remove old tinycore64 modules directory"
    sudo rm -rf $INITRD/lib/modules/*-tinycore64

    echo "1 Creating LIB directory"  
    sudo mkdir -p $LIB

    echo "2 Installing modules in $LIB (takes a while)"
    sudo make INSTALL_MOD_PATH=$INITRD modules_install >/dev/null
  
    echo "3 Compressing modules in LIB directory"
    sudo find $LIB -name '*.ko' -exec gzip -9 {} \;

    sudo rm -rf $LIB/build
    sudo rm -rf $LIB/source
  
    echo "4 Depmodding the new gzipped modules"
    sudo depmod -b $INITRD $LIBNAME
  
    echo "5 Linking tinycore usr/local/lib new version kernel.tclocal"
    sudo ln -s /usr/local/lib/modules/$LIBNAME/ $LIB/kernel.tclocal

    TOTAL=`find $LIB -name '*.ko.gz' | wc -l`
    echo "6 Modules (total $TOTAL) are ready in $LIB"

    echo "7 Making tree from $LIBNAME in $RELEASE"
    tree -h $ISODIR/initrd/lib/modules/$LIBNAME/kernel > $ISODIR/tree.txt

    echo "8 removing old kernel"  
    sudo rm $BOOT/$KERNEL

    echo "9 copying new kernel as $KERNEL and make it readonly"
    sudo cp ./arch/x86/boot/bzImage $BOOT/$KERNEL
  
    sudo chmod 444 $BOOT/$KERNEL
    echo
    echo "New kernel and modules are ready to pack in an ISO"
  else
    echo "initrd directory does not exist: $INITRD"
  fi
}

function MakeISOFS()
{
  echo
  echo "Make ISO FS"
  cd $ISODIR
  if [[ -d "iso_contents" ]]; then
    echo "Creating ISO from only iso_contents (no initrd)"
    cd iso_contents

    cd boot
    
    if [ -f corepure64.gz ]; then
      echo "initrd points to corepure64.gz"
      sudo sed -i 's/\tinitrd.*/\tinitrd \/boot\/corepure64.gz/g' isolinux/isolinux.cfg
    fi
    
    if [ -f rootfs64.gz ] && [ -f modules64.gz ]; then
      echo "initrd points to rootfs64.gz and modules64.gz"
      sudo sed -i 's/\tinitrd.*/\tinitrd \/boot\/rootfs64.gz,\/boot\/modules64.gz/g' isolinux/isolinux.cfg
    fi

    if [ -f vmlinuz ]; then
      echo "Found vmlinuz"
      sudo sed -i 's/\kernel.*/\kernel \/boot\/vmlinuz/g' isolinux/isolinux.cfg
    fi

    if [ -f vmlinuz64 ]; then
      echo "Found vmlinuz64"
      sudo sed -i 's/\kernel.*/\kernel \/boot\/vmlinuz64/g' isolinux/isolinux.cfg
    fi
    
    if [ ! -f vmlinuz ] && [ ! -f vmlinuz64 ]; then
      echo "There is no kernel found exitting"
      return
    fi    

    if [ ! -f corepure64.gz ] && [ ! -f rootfs64.gz ]; then
      echo "Minimum needed corepure64.gz or rootfs64.gz exitting"
      return
    fi
    cd ..
    sudo mkisofs -r -R -l -J \
      -no-emul-boot \
      -V TC-custom \
      -boot-load-size 4 \
      -boot-info-table \
      -b boot/isolinux/isolinux.bin \
      -c boot/isolinux/boot.cat \
      -o ../$NEWISO \
      ./
    cd ..
    sudo chown tc:staff $NEWISO
    FILESIZE=$(stat -c%s "$NEWISO")
    echo "Done creating $NEWISO size $FILESIZE"
  else
    echo "iso_contents does not exist, try ISO extract first"
  fi
} 


function MakeNewIso ()
{
  echo "Making new ISO from iso_contents and initrd"
  cd $ISODIR
  if [ -d "iso_contents" ] && [ -d "initrd" ]; then
    echo "renoving old gz files form iso_contents/boot"
    sudo rm -rf ./iso_contents/boot/*.gz
    echo "Creating corepure64.gz from initrd"
    cd initrd
    sudo sh -c 'find . | cpio --create --format='newc' | gzip -6f > ../iso_contents/boot/corepure64.gz'
    MakeISOFS
  else
    echo "iso_contents or initrd does not exist, try ISO extract first"
  fi
}

function PurgeExtraction ()
{
  echo
  echo "Purge extraction"
  cd $ISODIR

  if [ -d "iso_contents" ] && [ -d "initrd" ]; then
    read -p "Delete iso_conents or initrd ? [Yn]: " yesno
    if [[ $yesno != "Y" ]]; then
      return
    fi

    sudo rm -rf iso_contents
    sudo rm -rf initrd
    echo "iso_contents and initrd are deleted"
  else
    echo "iso_contents or initrd not exist, try ISO extract first"
  fi
}

KERNELVERSION="6.1.2"


function ShowVars()
{
  echo
  echo "WORKINGDIR=$WORKINGDIR"
  echo "RELEASE=$RELEASE"
  echo "ISODIR=$ISODIR"
  echo "ISOSRC=$ISOSRC"
  echo "NEWISO=$NEWISO"
  echo "LINUX=$LINUX"
  echo
}

function MrProper()
{
  echo
  echo "Clean it all"
  cd $LINUXPATH
  make mrproper
  echo "Done"
}


function MakeModules()
{
  echo
  echo "Making modules using all cores"
  cd $LINUXPATH
  make modules -j`nproc`
  echo "Done"
}

function MakeKernel()
{
  echo
  echo "Making kernel bzImage using all cores"
  cd $LINUXPATH
  make bzImage -j`nproc`
  echo "Done"
}

function Reconfigure()
{
  echo
  echo "make menuconfig"
  cd $LINUXPATH
  make menuconfig
}

function MakeNoConfig()
{
  echo
  echo "make allnoconfig"
  cd $LINUXPATH
  make allnoconfig
  read -p "Change .config to SMP (Symmetrical Multi Processing) [Yn] ? " yesno
  if [[ $yesno == "Y" ]]; then
    sed -i 's/CONFIG_BROKEN_ON_SMP=y/# CONFIG_BROKEN_ON_SMP is not set/g' .config
    sed -i 's/# CONFIG_SMP is not set/CONFIG_SMP=y/g' .config
    echo "changed to SMP"
  fi
}

function LoadPackages()
{
  echo
  echo "Load all needed packages"
  tce-load -wi coreutils compiletc gcc binutils make squashfs-tools ncursesw-dev bison flex-dev openssl-1.1.1-dev elfutils-dev gettext-dev bc perl5
  echo "Done"
}

function ShowGLibCompat()
{
  strings /lib/libc.so.6 | grep GLIBC
}

function MakeNewGLib()
{
  tce-load -wi python3.9 texinfo
  cd $WORKINGDIR
  if [ ! -d "$GLIBVERSION" ]; then
    wget "https://ftp.gnu.org/gnu/glibc/$GLIBVERSION.tar.gz"
    echo "extracting sources ..."
    tar xzf "$GLIBVERSION.tar.gz"
    rm "$GLIBVERSION.tar.gz"
  fi
  cd "$GLIBVERSION"
  mkdir -p build
  mkdir -p install
  cd build
  echo "Configure ..."
  ../configure --prefix="$WORKINGDIR/$GLIBVERSION/install"
  make -j`nproc`
  make install
}


function InstallGLib()
{
  echo
  echo "install GLib"

  GLIB="$WORKINGDIR/$GLIBVERSION/install/lib"

  if [ ! -d $GLIB ]; then
    echo "installdir $GLIB does not exist"
    exit
  fi
  
  LIBDEST="$INITRD/lib"
  
  if [ ! -d $LIBDEST ]; then
    echo "lib destination $LIBDEST does not exist"
    exit
  fi

#  sudo find "$LIBDEST" -maxdepth 1 -type f -delete
#  sudo find "$LIBDEST" -maxdepth 1 -type l -delete

  FILES="$GLIB/*.so*"
  for f in $FILES
  do
    if [ ! -h "$f" ]
    then
      sudo strip $f 2>/dev/null
      if [ $? -eq 0 ]; then
        sudo cp -a $f $LIBDEST
      fi
    else
      sudo cp -a $f $LIBDEST
    fi
  done
  sudo chown -R root:root $LIBDEST
  echo "Done"
}

function SelectPreConfig()
{
  echo
  echo "Creating .config file for $LINUX"
  cd $SCRIPTDIR
  files=`ls -a Config*`
  i=1
  for file in $files; do
    echo "$i - $file"
    i="$(($i + 1))"
  done
  echo
  read -p "Select Config file to install q=quit ? " ccc
  if [ $ccc == "q" ]; then return ; fi

  i=1
  for file in $files; do
    if [[ $i == $ccc ]]; then
      echo
      echo "Copy $file to $LINUXPATH/.config"
      cp -f $file $LINUXPATH/.config
    fi
    i="$(($i + 1))"
  done
}

function CheckPrereq()
{
  echo

  echo "checking packages"
  tce-load -wi rsync mkisofs-tools >/dev/null
  tce-load -wi coreutils compiletc gcc binutils make squashfs-tools ncursesw-dev bison >/dev/null
  tce-load -wi flex-dev openssl-1.1.1-dev elfutils-dev gettext-dev bc perl5 python3.9 texinfo >/dev/null

  ShowVars

  if [ "$(id -u)" -eq 0 ]; then echo "Please run as user (not root)."; exit 1; fi

  if [ ! -d $WORKINGDIR ]; then echo "Directory $WORKINGDIR does not exist"; exit 1; fi

  if [ ! -w $WORKINGDIR ]; then 
    sudo chown root:staff $WORKINGDIR
    sudo chmod 775 $WORKINGDIR
  fi

  if [ ! -d $ISODIR ]; then mkdir $ISODIR; fi

  cd $ISODIR
  if [ ! -d "$INITRD" ]; then
    echo "No initrd, create new initrd from;"
    read -p "Download official tinycore $ISOSRC = 0, Mounting boot cdrom  = 1, quit = q [01q]: " yesno

    if [[ $yesno == "q" ]]; then return ; fi
 
    if [[ $yesno == "0" ]]; then
      echo "getting iso from tinycore site"
      wget -q "$REMOTE$ISOSRC"
      IsoExtract
    fi
  
    if [[ $yesno == "1" ]]; then
      echo "mounting cdrom"
      sudo mount /mnt/sr0

      echo "making iso_contents"
      sudo mkdir iso_contents
      sudo rsync -a -H /mnt/sr0/ iso_contents/
      sudo umount /mnt/sr0
      MakeInitRd $ISODIR/iso_contents/boot
    fi
    
    echo "done."
  fi

  cd $WORKINGDIR

  if [ ! -d "$LINUX" ]; then
    echo "LINUX directory for kernel $LINUX not found"

    read -p "Getting $LINUX From official kernel.org site ? [Yn]: " yesno
      if [[ $yesno != "Y" ]]; then
        exit
      fi
    wget -q "$LINSRC"
    echo "extracting sources ..."
    tar -xf $LINUX.tar.xz
    echo "removing tar file"
    rm $LINUX.tar.xz  
  fi
}

function MakeBusyBox()
{
  echo
  PKG=$INITRD
  mkdir -p "$WORKINGDIR/bb"
  LOG="$WORKINGDIR/bb/log.txt"
  echo -n > $LOG
  cd "$WORKINGDIR/bb"
  echo "Making busybox"
  echo "=============="
  if [[ ! -f $BB ]]; then
    echo "gettting sources from official busybox.net site"
    wget -q https://www.busybox.net/downloads/$BB
  fi
  
  NAME=$(echo $BB | sed 's/.tar.bz2//')
  if [[ ! -d $NAME ]]; then
    echo "tar xf $BB"
    tar xf $BB
  fi
  
  BBTC="http://tinycorelinux.net/14.x/x86_64/release/src/busybox"

  echo "Getting pataches from tinycore"
  [ ! -f busybox-1.27.1-wget-make-default-timeout-configurable.patch ] && wget -q "$BBTC/busybox-1.27.1-wget-make-default-timeout-configurable.patch"
  [ ! -f busybox-1.29.3_root_path.patch ] && wget -q "$BBTC/busybox-1.29.3_root_path.patch"
  [ ! -f busybox-1.33.0_modprobe.patch ] && wget -q "$BBTC/busybox-1.33.0_modprobe.patch"
  [ ! -f busybox-1.33.0_tc_depmod.patch ] && wget -q "$BBTC/busybox-1.33.0_tc_depmod.patch"

  cd $NAME
 
  echo "Patching sources" 
  patch -Np1 -i ../busybox-1.27.1-wget-make-default-timeout-configurable.patch >/dev/null 2>&1
  patch -Np1 -i ../busybox-1.29.3_root_path.patch >/dev/null 2>&1
  patch -Np1 -i ../busybox-1.33.0_modprobe.patch >/dev/null 2>&1
  patch -Np0 -i ../busybox-1.33.0_tc_depmod.patch >/dev/null 2>&1

  echo "Getting configuration files from tinycore"

  [ ! -f busybox-1.36.0_config_suid  ] && wget -q "$BBTC/busybox-1.36.0_config_suid"
  [ ! -f busybox-1.36.0_config_nosuid ] && wget -q "$BBTC/busybox-1.36.0_config_nosuid"

  echo "Patch busybox-1.36.0_config_suid for future mount nfs to NO"
  sed -i 's/CONFIG_FEATURE_MOUNT_NFS=y/CONFIG_FEATURE_MOUNT_NFS=n/' busybox-1.36.0_config_suid
  
  CC="gcc -flto -mtune=generic -Os -pipe"
  CXX="g++ -flto -mtune=generic -Os -pipe -fno-exceptions -fno-rtti"

  mkdir -p $PKG
  
  read -p "Delete current busybox entries from $INITRD [Yn] ? " yesno
  
  if [[ $yesno != "Y" ]]; then return ; fi

  I=0
  dirs="/bin /sbin /usr/bin /usr/sbin"
  for dir in $dirs; do
    for lnkname in `find $INITRD$dir -type l`; do
      F=$(readlink $lnkname | awk '/.*busybox.*/' )
      if [ ! -z $F ]; then
        sudo rm -f $lnkname
        I=$(($I + 1))
      fi
    done
  done
  
  echo "All $I old busybox entries are removed"

  read -p "Compile and intall new busybox entries in $PKG [Yn] ? " yesno
  
  if [[ $yesno != "Y" ]]; then return ; fi

  echo
  echo "Copy tainted busybox config"
  cp busybox-1.36.0_config_suid .config  
  echo "make oldconfig"
  make oldconfig >>$LOG 2>&1
  echo "make ..."
  make CC="$CC" CXX="$CXX" >>$LOG 2>&1
  echo "make install"
  sudo make CC="$CC" CXX="$CXX" CONFIG_PREFIX=$PKG install >>$LOG 2>&1
  sudo mv $PKG/bin/busybox $PKG/bin/busybox.suid
  sudo chmod u+s $PKG/bin/busybox.suid
  echo "renaming all links"
  
  I=0
  for dir in $dirs; do
    for lnkname in `find $INITRD$dir -type l`; do
      F=$(readlink $lnkname | awk '/.*busybox$/' )
      if [ ! -z $F ]; then
        sudo rm -f $lnkname
        sudo ln -s $F.suid $lnkname
        I=$(($I + 1))
      fi
    done
  done  
  echo "making $I tainted busybox entries done"
  echo
  echo "Copy normal busybox config"
  cp busybox-1.36.0_config_nosuid .config
  echo "make oldconfig"
  make oldconfig >>$LOG 2>&1
  echo "make ..."
  make CC="$CC" CXX="$CXX" >>$LOG 2>&1
  echo "make install"
  sudo make CC="$CC" CXX="$CXX" CONFIG_PREFIX=$PKG install >>$LOG 2>&1
  echo "Normal busybox ready" 
  echo "Busybox is installed to $PKG"

  I=0
  dirs="/bin /sbin /usr/bin /usr/sbin"
  for dir in $dirs; do
    for lnkname in `find $INITRD$dir -type l`; do
      F=$(readlink $lnkname | awk '/.*busybox.*/' )
      if [ ! -z $F ]; then
        I=$(($I + 1))
      fi
    done
  done
  echo "Created total of $I busybox entries"
  echo
  echo "done."
}

# ===========================================

CheckPrereq

cd $WORKINGDIR

while :
do
  echo
  echo "ISO-Builder $ISOBUILDER"
  echo "============================="
  echo "c - make mrproper"
  echo "0 - make allnoconfig (!!! better use your own .config file !!!)"
  echo "C - List and select predefined config files"
  echo "r - Re-configure using make menuconfig"
  echo "k - make bzImage (kernel)"
  echo "m - make modules"
  echo "i - Install Kernel and Modules"
  echo "n - Make new ISO"
  echo "p - Purge extraction"
  echo "x - ISO extract"
  echo "v - Show Variables"
  echo "w - install all packages for the build system"
  echo "s - Make ISO FS (modules64.gz, rootfs64.gz or corepure64.gz) and vmlinuz64"
  echo "b - Make BusyBox"
  echo
  echo "q - Quit"
  echo
  read -p "c,0,r,k,m,i,n,p,x,v,w,s or q(uit) :" c
  case  $c  in
    c) MrProper ;;
    0) MakeNoConfig ;;
    C) SelectPreConfig ;;
    r) Reconfigure ;;
    k) MakeKernel ;;
    m) MakeModules ;;
    i) Install ;;
    n) MakeNewIso ;;
    p) PurgeExtraction ;;
    x) IsoExtract ;;
    v) ShowVars ;;
    w) LoadPackages ;;
    s) MakeISOFS ;;
    b) MakeBusyBox ;;
    q) exit ;;
    *) echo "Say what? $c" ;;
  esac 
done
